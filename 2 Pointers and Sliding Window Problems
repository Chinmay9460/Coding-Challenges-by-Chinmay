Question Name ==> Q 3306.) Count of Substrings Containing Every Vowel and K Consonants II 
Note # This following question is given with 'word' string and a non -ve integer k.
## Asking to return total number of substrings of word_string that contains every vowel ('a','e','i',
'o','u') and exactly k consonants....

Approach 1: Sliding Window
- This is a brute force approach would involve manually going through every substring of word_string and
checking if each substring satisfies the 2 requirement listed.
- Our Sliding window maintains 2 pointers start and end. end_pointer moves forward and start_pointer 
moves shrinking the array.

-- To determine if a window contains a valid substring, we track 2 values (vowelCount, consonentCount).
-- #Our window will exactly contain vowelCount(with all vowels) and consonantCount == k.

class Solution {
private:
    bool isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }

public:
    long countOfSubstrings(string word, int k) {
        long numValidSubstrings = 0;
        int start = 0;
        int end = 0;
        unordered_map<char, int> vowelCount;
        int consonantCount = 0;

        vector<int> nextConsonant(word.size());
        int nextConsonantIndex = word.size();
        for (int i = word.size() - 1; i >= 0; i--) {
            nextConsonant[i] = nextConsonantIndex;
            if (!isVowel(word[i])) {
                nextConsonantIndex = i;
            }
        }

        while (end < word.size()) {
            char newLetter = word[end];

            if (isVowel(newLetter)) {
                vowelCount[newLetter]++;
            } else {
                consonantCount++;
            }

            while (consonantCount > k) {
                char startLetter = word[start];
                if (isVowel(startLetter)) {
                    vowelCount[startLetter]--;
                    if (vowelCount[startLetter] == 0) {
                        vowelCount.erase(startLetter);
                    }
                } else {
                    consonantCount--;
                }
                start++;
            }

            while (start < word.size() && vowelCount.size() == 5 &&
                   consonantCount == k) {
                numValidSubstrings += nextConsonant[end] - end;
                char startLetter = word[start];
                if (isVowel(startLetter)) {
                    vowelCount[startLetter]--;
                    if (vowelCount[startLetter] == 0) {
                        vowelCount.erase(startLetter);
                    }
                } else {
                    consonantCount--;
                }

                start++;
            }
            end++;
        }

        return numValidSubstrings;
    }
};
TIME COMPLEXITY --> O(N)


APPROACH 2: Sliding Window (Relaxed Constraints)
