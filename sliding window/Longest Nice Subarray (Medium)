You are given an array nums consisting of positive integers.

We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.

Return the length of the longest nice subarray.

A subarray is a contiguous part of an array.

Note that subarrays of length 1 are always considered nice.

 

Example 1:

Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:
- 3 AND 8 = 0.
- 3 AND 48 = 0.
- 8 AND 48 = 0.
It can be proven that no longer nice subarray can be obtained, so we return 3.
Example 2:

Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109

Approach --> there can be 2 approaches to this problem and the optimum is sliding window approach...

#1 Binary search approach --> 
class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        // Binary search for the longest nice subarray length
        int left = 0, right = nums.size();
        int result = 1;  // Minimum answer is 1 (as subarrays of length 1 are always nice)

        while (left <= right) {
            int length = left + (right - left) / 2;
            if (canFormNiceSubarray(length, nums)) {
                result = length;    // Update the result
                left = length + 1;  // Try to find a longer subarray
            } else {
                right = length - 1;  // Try a shorter length
            }
        }
        return result;
    }

private:
    bool canFormNiceSubarray(int length, vector<int>& nums) {
        if (length <= 1) return true;  // Subarray of length 1 is always nice

        // Try each possible starting position for subarray of given length
        for (int start = 0; start <= nums.size() - length; ++start) {
            int bitMask = 0;  // Tracks the bits used in the current subarray
            bool isNice = true;

            // Check if the subarray starting at 'start' with 'length' elements
            // is nice
            for (int pos = start; pos < start + length; ++pos) {
                // If current number shares any bits with existing mask,
                // the subarray is not nice
                if ((bitMask & nums[pos]) != 0) {
                    isNice = false;
                    break;
                }
                bitMask |= nums[pos];  // Add current number's bits to the mask
            }

            if (isNice)
                return true;  // Found a nice subarray of the specified length
        }
        return false;  // No nice subarray of the given length exists
    }
};


#2 approach Sliding Window approach --> 

Intuition
Binary search helps us find the largest possible length through educated guessing. However, let's try a more direct approach.
We'll build our solution by taking larger and larger subarrays until adding a new element breaks the "nice" property. When this happens, 
we need to remove elements from the beginning until we restore that property.This idea naturally translates to a variable-size sliding window approach. 

To check the validity of each window, we can use a similar concept as the previous approach, by using a bitmask to store all the bits already used in the window 
(let's call it usedBits).We start with an empty window and expand it by adding elements one by one. Each time we add a new element, 
we check whether it conflicts with our existing window by seeing if any of its bits overlap with usedBits. 

If there is an overlap, the subarray is no longer "nice" because two elements now share a set bit.
When a conflict occurs, we shrink the window from the left by removing elements until the conflict is resolved. Each time we remove an element, 
we clear its bits from the usedBits tracker by XOR'ing it with the element being removed.

Throughout this process, we maintain a variable maxLength to track the longest "nice" subarray we have found. Whenever we expand the window without conflicts, 
we update maxLength. By the end of the iteration, maxLength will contain the length of the longest valid subarray.

class Solution {
public:
    int longestNiceSubarray(vector<int>& nums) {
        int st = 0;
        int end = 0;
        int maxLen = 0;
        int bitUsed = 0;
        while(end < nums.size()){
            
            while((nums[end] & bitsUsed) != 0){
                bitsUsed -= nums[st];
                st++;
            }
            bitUsed += nums[end];
            maxLen = max(maxLen, end - st + 1);
            end++;
        }
        return maxLen;
    }
};
