Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:

Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 
Example 2:

Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 
Example 3:

Input: s = "abc"
Output: 1
 

Constraints:

3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.


Sliding window approach --> 

class Solution {
public:
    int numberOfSubstrings(string s) {
        int count = 0;
        vector<int>freq(3,0);
        int i = 0;
        int j = 0;
        while(j < s.size()){
            freq[s[j] - 'a']++;
            while(freq[0] > 0 && freq[1] > 0 && freq[2] > 0){
                count += s.size() - j;
                freq[s[i] - 'a']--;
                i++;
            }
            j++;
        }
        return count;
    }
};


🚩 Why Add s.size() - j to the Count?
Once you find a valid substring (containing a, b, and c):

The substring starting at i and ending at j is guaranteed to be valid.
But there are additional valid substrings that can be formed by extending the current valid substring:
You can include every character after j in the substring, making the new substrings still valid.
For example, if s = "abcde", when j = 2 forms the substring abc, you can form additional valid substrings:
abc
abcd
abcde
The number of valid substrings starting at i and including all characters from j to the end is:
s.size()
−
𝑗
s.size()−j
Therefore, you add s.size() - j to the count.


Optimal Code --> 

class Solution {
public:
// Optimal-- TC-> O(n), SC->O(1)
    int numberOfSubstrings(string s) {
        int hash[3] = {-1,-1,-1};
        int cnt =0;
        for(int i=0; i<s.size(); i++){
            hash[s[i]-'a'] =i;
            if(hash[0]!=-1 && hash[1]!=-1 && hash[2]!= -1){
                cnt += 1 + min(min(hash[0],hash[1]),hash[2]);
            }
        }
        return cnt;
    }
};
