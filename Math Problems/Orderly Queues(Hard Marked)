You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string.

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.

Example 1:

Input: s = "cba", k = 1
Output: "acb"
Explanation: 
In the first move, we move the 1st character 'c' to the end, obtaining the string "bac".
In the second move, we move the 1st character 'b' to the end, obtaining the final result "acb".
Example 2:

Input: s = "baaca", k = 3
Output: "aaabc"
Explanation: 
In the first move, we move the 1st character 'b' to the end, obtaining the string "aacab".
In the second move, we move the 3rd character 'c' to the end, obtaining the final result "aaabc".
 

Constraints:

1 <= k <= s.length <= 1000
s consist of lowercase English letters.

Observation --> 
1.) This Question is marked hard but not hard if you understand concept behind in it.
2.) The concept --> 1.) if k == 1 that means the window size is 1 means the greatest will go in the back and rest of the string will be there.
                    2.) if k >= 2 that means the window size if greater than 1 and this means we have any number of chances to reach the minimum
                        string so the code will look alike --> 

Intiuition --> 

Firstly, this is string rotation.
12345 -> 23451 -> 34512 -> 45123 -> 51234
I use number instead of letters to make it clear.

If K == 1, we can only rotate the whole string.
There are S.length different states and
we return the lexicographically smallest string.

If K > 1, it means we can:

rotate the whole string,
rotate the whole string except the first letter.
012345 -> 023451 -> 034512 -> 045123 -> 051234
We can rotate i+1th big letter to the start (method 1),
then rotate ith big letter to the end (method 2).
2XXX01 -> XXX012

In this way, we can bubble sort the whole string lexicographically.
So just return sorted string.


code --> O(n*log(n))
class Solution {
public:
    string orderlyQueue(string s, int k) {
        //if we have k > 1 then infinite ways to reach smallest string so directly sort the string
        if(k > 1){
            sort(s.begin(), s.end());
            return s;
        }
        string res = s;
        for(int i = 1;i<s.length();i++){
            res = min(res, s.substr(i) + s.substr(0, i));
        }
        return res;
    }
};
