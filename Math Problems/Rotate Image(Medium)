href --> https://leetcode.com/problems/rotate-image/description/

You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]
Example 2:


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 20
-1000 <= matrix[i][j] <= 1000

Observations and Discussions --> Based on imagining how the matrix will move upon certain actions...
  1.)Do the transpose of the matrix
  2.)Reverse each row.
  **3.)(Important) Remember about reductant swaps in transposing the matrix if we do n^2 times the matrix will look
                  the same and for that we will we will start inner loop from current row iterator.
  3.)There can be question like rotate image by 270 degree, 180 degree
  4.)As this question is only asking for inplace solution -->
      I will first put inplace solution then I will put solution otherwise and anticlockwise as well..

Code -->
1.) My solution based on intuition(Transpose + reverse the rows)
class Solution {
public:
    void rotate(vector<vector<int>>& mat) {
        int row_size = mat.size();
        int col_size = mat[0].size();


        // transposing the matrix
        for(int i = 0;i<row_size;i++){
            for(int j = i;j<col_size;j++){
                if(i == j)continue;
                swap(mat[j][i], mat[i][j]);
            }
        }

        // reversing each row in the matrix
        for(int i = 0;i<row_size;i++){
            reverse(mat[i].begin(), mat[i].end());
        }
    }
};

2.) creating a new array then putting elements in reverse fashion in that array then replace matrix with new array

--> for clockwise :::
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>>rotated(n,vector<int>(n));
        for(int i = 0;i<matrix.size();i++){
            for(int j = 0;j<matrix[i].size();j++){
                rotated[j][n - 1 - i] = matrix[i][j];
            }
        }
        for(int i = 0;i<rotated.size();i++){
            for(int j = 0;j<rotated[i].size();j++){
                matrix[i][j]=rotated[i][j];
            }
        }
    }
};

for anticlockwise --> 
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>>rotated(n,vector<int>(n));
        for(int i = 0;i<matrix.size();i++){
            for(int j = 0;j<matrix[i].size();j++){
                rotated[matrix[0].size() - 1 - j][i] = matrix[i][j];
            }
        }
      //we can skip this step for solution not having inplace solution...
        for(int i = 0;i<rotated.size();i++){
            for(int j = 0;j<rotated[i].size();j++){
                matrix[i][j]=rotated[i][j];
            }
        }
    }
};

3.) Vertical Reversal + Transpose -->
class Solution {
public:
    void rotate(vector<vector<int>>& mat) {
        int row_size = mat.size();
        int top = 0;
        int bottom = row_size - 1;

        while(top < bottom){
            for(int col = 0;col < row_size;col++){
                swap(mat[top][col], mat[bottom][col]);
            }
            top++;
            bottom--;
        }

        for(int i = 0;i < row_size;i++){
            for(int j = i+1;j < row_size;j++){
                swap(mat[i][j], mat[j][i]);
            }
        }
    }
};
