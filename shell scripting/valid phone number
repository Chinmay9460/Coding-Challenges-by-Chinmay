Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.
You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)
You may also assume each line in the text file must not contain leading or trailing white spaces.
Example:

Assume that file.txt has the following content:

987-123-4567
123 456 7890
(123) 456-7890
Your script should output the following valid phone numbers:

987-123-4567
(123) 456-7890


In Bash, we use \ to escape next one trailing character;
^ is used to denote the beginning of a line
$ is used to denote the end of a line
{M} is used to denote to match exactly M times of the previous occurence/regex
(...) is used to group pattern/regex together
Back to this problem: it requires us to match two patterns, for better readability, I used -e and separate the two patterns into two regexes, the first one matches this case: xxx-xxx-xxxx and the second one matches this case: (xxx) xxx-xxxx

#1 code --> 
# Read from the file file.txt and output all valid phone numbers to stdout.
#There are only 2 valid patterns p and p2
p=\([0-9][0-9][0-9]\)\ [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]
p2=[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]

while read -r line; 
do
  case "$line" in
    $p)
    echo "$line"
    ;;
    $p2)
    echo "$line"
    ;;
  esac
done < file.txt

#2 code --> 
  #2 patterns are embeded in 1 sentence
  file="file.txt"
  regex="^([0-9]{3}-[0-9]{3}-[0-9]{4})$|^(\([0-9]{3}\) [0-9]{3}-[0-9]{4})$"
  grep -E "$regex" "$file"

#3 --> we ca do regex for 1st 3 digits only as well..
grep -E "^(([0-9]{3}-)|(\([0-9]{3}\)\s))[0-9]{3}-[0-9]{4}$" file.txt


#using grep or sed or awk --> 
grep -P '^(\d{3}-|\(\d{3}\) )\d{3}-\d{4}$' file.txt
sed -n -r '/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/p' file.txt
awk '/^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$/' file.txt
