Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

    The left 

    of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

Example 1:

Input: root = [2,1,3]
Output: true

Example 2:

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Constraints:

    The number of nodes in the tree is in the range [1, 104].
    -231 <= Node.val <= 231 - 1




Problem Statement Summary:

    Given the root of a binary tree, determine if it is a valid Binary Search Tree (BST).

    A valid BST is defined as follows:

        The left subtree of a node contains only nodes with keys less than the node's key.

        The right subtree of a node contains only nodes with keys greater than the node's key.

        Both the left and right subtrees must also be binary search trees.

Let’s go through all common solutions step by step.
✅ 1. Recursive with Min/Max Bounds (Cleanest and most efficient)

This is the most standard approach. Use helper function with bounds.

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return validate(root, LONG_MIN, LONG_MAX);
    }
    
    bool validate(TreeNode* node, long minVal, long maxVal) {
        if (!node) return true;
        if (node->val <= minVal || node->val >= maxVal) return false;
        return validate(node->left, minVal, node->val) &&
               validate(node->right, node->val, maxVal);
    }
};

✅ Pros:

    O(n) time, O(h) space (stack space for recursion)

    Clean and intuitive

    Covers duplicates correctly

✅ 2. Inorder Traversal (Check if strictly increasing)

In BST, inorder traversal gives a sorted list. So we can check if the current node is greater than the previous one.

class Solution {
public:
    TreeNode* prev = nullptr;

    bool isValidBST(TreeNode* root) {
        if (!root) return true;
        if (!isValidBST(root->left)) return false;
        if (prev && prev->val >= root->val) return false;
        prev = root;
        return isValidBST(root->right);
    }
};

✅ Pros:

    Also O(n) time and O(h) space

    Easy to implement

✅ 3. Iterative Inorder Traversal (Using Stack)

Avoids recursion and uses an explicit stack to simulate inorder traversal.

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        stack<TreeNode*> st;
        TreeNode* curr = root;
        TreeNode* prev = nullptr;

        while (curr || !st.empty()) {
            while (curr) {
                st.push(curr);
                curr = curr->left;
            }
            curr = st.top(); st.pop();
            if (prev && prev->val >= curr->val) return false;
            prev = curr;
            curr = curr->right;
        }
        return true;
    }
};

✅ 4. Inorder + Array Check (Extra Space)

You collect all values in an array, then check if the array is strictly increasing.

class Solution {
public:
    void inorder(TreeNode* root, vector<int>& nums) {
        if (!root) return;
        inorder(root->left, nums);
        nums.push_back(root->val);
        inorder(root->right, nums);
    }

    bool isValidBST(TreeNode* root) {
        vector<int> nums;
        inorder(root, nums);
        for (int i = 1; i < nums.size(); ++i)
            if (nums[i] <= nums[i - 1]) return false;
        return true;
    }
};

⚠️ Cons:

    O(n) time, but O(n) extra space

✅ 5. Morris Inorder Traversal (O(1) Space)

Advanced solution that uses threading (Morris Traversal) to do inorder in O(1) space.

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        TreeNode* curr = root;
        TreeNode* prev = nullptr;
        TreeNode* pre = nullptr;

        while (curr) {
            if (!curr->left) {
                if (prev && prev->val >= curr->val) return false;
                prev = curr;
                curr = curr->right;
            } else {
                pre = curr->left;
                while (pre->right && pre->right != curr)
                    pre = pre->right;

                if (!pre->right) {
                    pre->right = curr;
                    curr = curr->left;
                } else {
                    pre->right = nullptr;
                    if (prev && prev->val >= curr->val) return false;
                    prev = curr;
                    curr = curr->right;
                }
            }
        }
        return true;
    }
};

✅ Pros:

    O(n) time, O(1) space

    But complex and not commonly expected in interviews unless asked specifically for space optimization

✍️ Summary Table:
Method	Time	Space	Notes
Min/Max Bound Recursion	O(n)	O(h)	Most intuitive & reliable
Inorder Recursion	O(n)	O(h)	Leverages BST property
Iterative Inorder (Stack)	O(n)	O(h)	Avoids recursion
Inorder + Array Check	O(n)	O(n)	Simpler, but uses extra space
Morris Traversal	O(n)	O(1)	Advanced, space optimized
