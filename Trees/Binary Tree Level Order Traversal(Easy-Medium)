Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []


Constraints:

    The number of nodes in the tree is in the range [0, 2000].
    -1000 <= Node.val <= 1000



Observation --> 1.)Null values I have to skip and traverse in the tree
2.) To traverse in Tree we are using queue why? -->
      because left side value will be first and accordingly move towards right side elements.


code --> 

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root == NULL)return ans;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            vector<int>temp;
            for(int i = 0;i<n;i++){
                TreeNode* node = q.front();
                q.pop();
                if(node != NULL){
                    temp.push_back(node->val);
                }
                if(node->left != NULL)q.push(node->left);
                if(node->right != NULL)q.push(node->right);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
