Given an integer array nums, return the length of the longest strictly increasing subsequence
 

Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1


Constraints:

    1 <= nums.length <= 2500
    -104 <= nums[i] <= 104


Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?


Solution 3: Binary Indexed Tree (Increase BASE of nums into one-base indexing)

    Let f[x] is the length of longest increase subsequence , where all number in the subsequence <= x. This is the max element in indices [1..x] if we build the Binary Indexed Tree (BIT)
    Since -10^4 <= nums[i] <= 10^4, we can convert nums into 1 <= nums[i] <= 2*10^4+1 by plus BASE=10001 to store into the BIT.
    We build Max BIT, which has 2 operators:
        get(idx): Return the maximum value of indices in range [1..idx].
        update(idx, val): Update a value val into BIT at index idx.
    Iterate numbers i in range [0..n-1]:
        subLongest = bit.get(nums[i] - 1) // Get longest increasing subsequence so far, which idx < nums[i], or idx <= nums[i] - 1.
        bit.update(nums[i], subLongest + 1) // Update latest longest to the BIT.
    The answer is bit.get(20001) // Maximum of all elements in the BIT


code --> 

class MaxBIT { // One-based indexing
    vector<int> bit;
public:
    MaxBIT(int size) {
        bit.resize(size + 1);
    }
    int get(int idx) {
        int ans = 0;
        for (; idx > 0; idx -= idx & -idx)
            ans = max(ans, bit[idx]);
        return ans;
    }
    void update(int idx, int val) {
        for (; idx < bit.size(); idx += idx & -idx)
            bit[idx] = max(bit[idx], val);
    }
};
class Solution { // 16 ms, faster than 72.16%
public:
    int lengthOfLIS(vector<int>& nums) {
        int BASE = 10001;
        MaxBIT bit(20001);
        for (int x : nums) {
            int subLongest = bit.get(BASE + x - 1);
            bit.update(BASE + x, subLongest + 1);
        }
        return bit.get(20001);
    }
};



Solution 4: Binary Indexed Tree (Compress nums into values in [1...N])

    In solution 3, -10^4 <= nums[i] <= 10^4 is small enough, so we can store in our Binary Indexed Tree (BIT).
    Can we store when -10^9 <= nums[i] <= 10^9 is very big? In that case, we can compress our nums array while keeping the relative comparation order between numbers.
    How to compress?
        In the nums array length N, where N <= 2500, there are maximum N different numbers.
        We can get the unique values of numbers in nums, and sort those values in increasing order, let name it uniqueSorted.
        Then we traverse i in range [0..n-1], we get the compressed value of nums[i] by looking the index in uniqueSorted.
        As the result, elemenents in nums is compressed into values in range [1...N].


class MaxBIT {
    vector<int> bit;
public:
    MaxBIT(int size) {
        bit.resize(size + 1);
    }
    int get(int idx) {
        int ans = 0;
        for (; idx > 0; idx -= idx & -idx)
            ans = max(ans, bit[idx]);
        return ans;
    }
    void update(int idx, int val) {
        for (; idx < bit.size(); idx += idx & -idx)
            bit[idx] = max(bit[idx], val);
    }
};
class Solution { // 12 ms, faster than 75.90%
public:
    int lengthOfLIS(vector<int>& nums) {
        int nUnique = compress(nums);
        MaxBIT bit(nUnique);
        for (int x : nums) {
            int subLongest = bit.get(x - 1);
            bit.update(x, subLongest + 1);
        }
        return bit.get(nUnique);
    }
    int compress(vector<int>& arr) {
        vector<int> uniqueSorted(arr);
        sort(uniqueSorted.begin(), uniqueSorted.end());
        uniqueSorted.erase(unique(uniqueSorted.begin(), uniqueSorted.end()), uniqueSorted.end()); // Remove duplicated values
        for (int& x : arr) x = lower_bound(uniqueSorted.begin(), uniqueSorted.end(), x) - uniqueSorted.begin() + 1;
        return uniqueSorted.size();
    }
};


Solution 5: Segment Tree

    Same solution 4, but instead of using BIT, we can use Segment Tree to retrieve maximum of elements in range [left...right]
#include <bits/stdc++.h>
using namespace std;

class SegmentTree {
    int n;
    vector<int> t;

    int query(int l, int r, int idx, int ql, int qr) {
        if (qr < l || ql > r) return 0;
        if (ql <= l && r <= qr) return t[idx];
        
        int mid = (l + r) >> 1;
        return max(
            query(l, mid, idx * 2 + 1, ql, qr),
            query(mid + 1, r, idx * 2 + 2, ql, qr)
        );
    }

    void update(int l, int r, int idx, int pos, int val) {
        if (l == r) {
            t[idx] = val;
            return;
        }
        
        int mid = (l + r) >> 1;
        if (pos <= mid)
            update(l, mid, idx * 2 + 1, pos, val);
        else
            update(mid + 1, r, idx * 2 + 2, pos, val);
        t[idx] = max(t[idx * 2 + 1], t[idx * 2 + 2]);
    }

public:
    SegmentTree(int size) : n(size), t(size * 4) {}

    int query(int l, int r) { return query(0, n - 1, 0, l, r); }
    void update(int pos, int val) { update(0, n - 1, 0, pos, val); }
};

class Solution {
public:
    int lengthOfLIS(vector<int>& a) {
        // Coordinate compression
        vector<int> sorted_a = a;
        sort(sorted_a.begin(), sorted_a.end());
        sorted_a.erase(unique(sorted_a.begin(), sorted_a.end()), sorted_a.end());
        
        vector<int> compressed(a.size());
        for (int i = 0; i < (int)a.size(); ++i)
            compressed[i] = lower_bound(sorted_a.begin(), sorted_a.end(), a[i]) - sorted_a.begin();

        // LIS using segment tree
        int n = sorted_a.size();
        SegmentTree st(n);
        
        for (int x : compressed) {
            int best = st.query(0, x - 1);
            st.update(x, best + 1);
        }
        
        return st.query(0, n - 1);
    }
};
